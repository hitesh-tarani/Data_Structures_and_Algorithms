#ifndef _HASH_H
#define _HASH_H

#include<fstream>
#include<iostream>
#include"hospital-patient.h"
#include"linked_lists.h"
#include"Linear_lists.h"
#include<cmath>
#define A 0.618033989

class openhash{
private:
  int length;
  char collmethod;
  LinearList <record> hashtable;
public:
  openhash();
  openhash(char ,int );
  void allocate_size(char ,int );
  int hash(char []);
  void storeElements();
  void Display();
  bool search(char[] );
  bool insert(record );
  bool Delete(char[] );
  int compress(int k);
};

class chain_hash{
private:
  int length;
  LinearList< Chain<record> > hashtable;
public:
  chain_hash();
  chain_hash(int );
  void allocate_size(int );
  int hash(char []);
  void storeElements();
  bool insert(record );
  void Display();
  bool search(char[] );
  bool Delete(char[] );
  int compress(int k);
};

openhash::openhash()
{
  
}

chain_hash::chain_hash()
{
  
}

chain_hash::chain_hash(int len)
{
  hashtable.allocate_size(len);
  length=len;
}

void chain_hash::allocate_size(int len)
{
  hashtable.allocate_size(len);
  length=len;
}

int chain_hash::compress(int k)
{
  return floor(length*(fmod((k*A),1)));
}

int openhash::compress(int k)
{
  return floor(length*(fmod((k*A),1)));
}

int offset(int key)
{
  return (5-key%5);
}

void chain_hash::storeElements()
{
  char key[8];
  ifstream File;
  int temp;
  File.open("input.txt");
  record a;
  while(!File.eof())
  {
    a.storeRecord(File);
    a.getId(key);
    temp=compress(hash(key));
    cout<<key<<" "<<temp<<endl;
    (hashtable.returnListElement(temp+1)).insert(a);
  }
}

bool chain_hash::insert(record a)
{
  int temp;
  char key[8];
  a.getId(key);
  temp=compress(hash(key));
  if((hashtable.returnListElement(temp+1)).length()>=(length/2))
    return false;
  (hashtable.returnListElement(temp+1)).insert(a);
  return true;
}

openhash::openhash(char type,int len)
{
  if(type=='l')
    collmethod='l';
  else if(type=='d')
    collmethod='d';
  hashtable.allocate_size(len);
  length=len;
}

void openhash::allocate_size(char type,int len)
{
  if(type=='l')
    collmethod='l';
  else if(type=='d')
    collmethod='d';
  hashtable.allocate_size(len);
  length=len;
}

void openhash::storeElements()
{
  char key[8];
  ifstream File;
  int temp,k;
  File.open("input.txt");
  record a;
  while(!File.eof())
  {
    a.storeRecord(File);
    a.getId(key);
    k=hash(key);
    temp=compress(k);
    cout<<key<<" "<<temp<<endl;
    int i=0,j=temp+1;
    if(collmethod=='l')
    {
      while((hashtable.returnListElement(j).flag!=0)&&i<length)
      {
	j=(j+1)%length;
	i=i+1;
      }
      if(i==length)
      {
	cout<<"rehash\n";
      }
      else
	hashtable.insert(j,a);
    }
    else if(collmethod=='d')
    {
      while((hashtable.returnListElement(j).flag!=0)&&i<length)
      {
	j=(j+offset(k))%length;
	i=i+1;
      }
      if(i==length)
      {
	cout<<"rehash\n";
      }
      else
	hashtable.insert(j,a);
    }
  }
}

bool openhash::insert(record a)
{
  char key[8];
  a.getId(key);
  int k=hash(key);
  int temp=compress(k);
  cout<<key<<" "<<temp<<endl;
  int i=0,j=temp+1;
  if(collmethod=='l')
  {
    while((hashtable.returnListElement(j).flag!=0)&&i<length)
    {
      j=(j+1)%length;
      i=i+1;
    }
    if(i==length)
    {
      cout<<"rehash\n";
    }
    else
      hashtable.insert(j,a);
  }
  else if(collmethod=='d')
  {
    while((hashtable.returnListElement(j).flag!=0)&&i<length)
    {
      j=(j+offset(k))%length;
      i=i+1;
    }
    if(i==length)
    {
      cout<<"rehash\n";
    }
    else
      hashtable.insert(j,a);
  }
}

bool openhash::search(char key[])
{
  int temp=compress(hash(key));
  int len=0,shift;
  if(collmethod=='l')
    shift=1;
  else
    shift=offset(hash(key));
  while(hashtable.returnListElement(temp+1).flag!=0 && len<length)
  {
    if(hashtable.returnListElement(temp+1).flag==1 && (hashtable.returnListElement(temp+1).keyComparator(key)))
    {
      (hashtable.returnListElement(temp+1)).Display();
      return true;
    }
    len++;
    temp=(temp+shift)%length;
  }
  return false;
}

bool openhash::Delete(char key[])
{
  int temp=compress(hash(key));
  int len=0,shift;
  if(collmethod=='l')
    shift=1;
  else
    shift=offset(hash(key));
  while(hashtable.returnListElement(temp+1).flag!=0 && len<length)
  {
    if(hashtable.returnListElement(temp+1).flag==1 && (hashtable.returnListElement(temp+1).keyComparator(key)))
    {
      (hashtable.returnListElement(temp+1)).Display();
      record a;
      a.flag=-1;
      hashtable.returnListElement(temp+1)=a;
      return true;
    }
    len++;
    temp=(temp+shift)%length;
  }
  return false;
}

bool chain_hash::search(char key[])
{
  record a;
  cout<<compress(hash(key))<<endl;
  while(hashtable.returnListElement(compress(hash(key))+1).traverse(a))
  {
    if(a.keyComparator(key))
    {
      a.Display();
      return true;
    }
  }
  return false;
}

bool chain_hash::Delete(char key[])
{
  record a;
  int temp=compress(hash(key));
  int pos=hashtable.returnListElement(temp+1).search(key,recordComp);
  return(hashtable.returnListElement(temp+1).deleteElement(pos,a));
}

void openhash::Display()
{
  int len=length;
  while(len--)
  {
    (hashtable.returnListElement(length-len)).Display();
  }
}

void chain_hash::Display()
{
  int len=length;
  record a;
  while(len--)
  {
    while((hashtable.returnListElement(length-len)).traverse(a))
      a.Display();
  }
}

int openhash::hash(char a[])
{
  int i,sum=0,key;
  for(i=0;i<8;i++)	 
  {
    sum+=((int)a[i])*pow(4,i);
  }
  return sum;
}

int chain_hash::hash(char a[])
{
  int i,sum=0,key;
  for(i=0;i<8;i++)	 
  {
    sum+=((int)a[i])*pow(4,i);
  }
  key=compress(sum);
  return key;
}
#endif
/*
int main()
{
  openhash a('d');
  a.storeElements(array_size);
  a.search("B234");
  chain_hash b;
  b.storeElements(array_size);
  b.search("B234");
  //a.Display();
  //b.Display();
}
*/
