#ifndef _LINEAR_LIST
#define _LINEAR_LIST

using namespace std;

template <class T>
class LinearList{
private:
  int MaxSize;
  T *element;    // 1D dynamic array
  int len;
public:
  LinearList();
  ~LinearList();
  LinearList(int  MaxSize);
  LinearList(const LinearList& temp);
  void allocate_size(int  MaxListSize);
  bool isEmpty();
  int maxSize();
  T& returnListElement(int k);
  bool find(int  k, T& x);
  int search(T& x);
  int search(char[] , bool(*function)(T , char[] ));
  void deleteElement(int  k, T& x);
  void insert(int  k, T x);
};

template <class T>
LinearList<T>::LinearList(int MaxListSize)
{ // Constructor for the sequential linear list
  MaxSize = MaxListSize;
  element = new T[MaxSize];
  len = 0;
}

template <class T>
LinearList<T>::LinearList()
{
  len = 0;
  element=NULL;
}

template <class T>
void LinearList<T>::allocate_size(int MaxListSize)
{
  MaxSize = MaxListSize;
  element = new T[MaxSize];
}

template <class T>
LinearList<T>::LinearList(const LinearList& temp) 
{ // Copy constructor
  MaxSize=temp.MaxSize;
  element = new T[MaxSize];
  len=temp.len;
  memcpy(element, temp.element, MaxSize); 
}

template <class T>
LinearList<T>::~LinearList()
{ // Distructor for the sequential linear list
  delete [] element;
}

template <class T>
bool LinearList<T>::isEmpty()
{ // Function that checks whether the list is empty
  return   len == 0;
}

template <class T>
int LinearList<T>::maxSize()
{ // Function that returns the length of the list
  return   MaxSize;
}

template <class T>
T& LinearList<T>::returnListElement(int k)
{ //Function that returns the k-th element of the list
  return element[k-1];
}

template <class T>
bool LinearList<T>::find(int  k, T& x)
{ // Set x to the kth element and return true if kth element is present otherwise return false. 
  if (k < 1 || k > MaxSize)
    return   false;
  x = element[k-1];
  return   true;
}

template <class T>
int LinearList<T>::search(T& x)
{ // Search for x and return the position if found, else return 0.
  for(int i=0;i<MaxSize;i++)
    if(element[i] == x)
      return ++i;
  return 0;
}

template <class T>
int LinearList<T>::search(char x[], bool(*function)(T a, char b[]))
{ // Search for x and return the position if found, else return 0.
  for(int i=0;i<MaxSize;i++)
    if(function(element[i],x)==0)
      return ++i;
  return 0;
}

template <class T>
void LinearList<T>::deleteElement(int k, T& x)
{
  element[k-1]=0;
  len--;
}

template <class T>
void LinearList<T>::insert(int  k, T x)
{
  element[k-1] = x;
  len++;
}
#endif
