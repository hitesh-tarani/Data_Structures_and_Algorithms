#ifndef _PRIM_INCLUDED_H
#define _PRIM_INCLUDED_H

#include"graph.h"
#include"heap.h"

#define inf 50000

class heap_node{
  friend class graph;
 private:
  vertex* v;
  int key;
  vertex* parent;
 public:
  int getKey();
  void setKey(int );

};



int heap_nodeComp(heap_node a, heap_node b)
{
  if(a.getKey()>b.getKey())
    return 1;
  else if(a.getKey()<b.getKey())
    return -1;
  else
    return 0;
}


void graph::mst_prim()
{
  int i;
  int s[n];
  heap<heap_node> h;
  heap_node x;
  heap_node* hp[n];
  for(i=0;i<n;i++)
  {
    vertex* a=&v.returnListElement(i+1);
    heap_node* b=new heap_node;
    s[i]=0;
    b.v=a;
    b.key=inf;
    b.parent=NULL;
    hp[i]=b;
    h.insert(b,heap_nodeComp);
  }
  vertex* s=&v.returnListElement(1);
  h.decrease_key(s,0,heap_nodeComp);
  while(!h.isEmpty())
  {
    b=h.delete_min();
    s[b.v->pos]=1;
    weighted_node c;
    while(getList(*(b.v)).traverse(c))
    {
      if(hp(c.next->pos)->key>c.weight)
      {
	hp(c.next->pos)->key=c.weight;
	hp(c.next->pos)->parent=b.v;
	h.decrease_key(*hp(c.next->pos),,heap_nodeComp);
      }
    }
  }
}

#endif
