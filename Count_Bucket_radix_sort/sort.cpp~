#include<sys/time.h>
#include<iostream>
#include<cstdlib>
#include<fstream>
using namespace std;

class sort{
private:
  int* arr;
  int len;
public:
  void storeElements(int , int );
  void CountSort(int , int );
  int* CountSort2(int* ,int ,int );
  void BucketSort(int ,int );
  void RadixSort(int , int );
  void Display(int );
};

void sort::storeElements(int k, int n)
{
  int i=0;
  arr = new int[n];
  cout<<"Enter the elements\n";
  for(i=0;i<n;i++)
  {
    cin >> arr[i];
    if(arr[i]>k)
    {
      cout<<"Max Element exceeded\n";
      exit(0);
    }
  }
  len=n;
}
class Node{
  friend class Chain;
private:
  int data;
  Node* next;
};

class Chain{
public:
  Node* first;
  Node* last;
public:
  Chain();
  void addNode(int );
  void addChain(Chain& );
  void Display();
};

Chain::Chain()
{
  first=last=NULL;
}

void Chain::addNode(int value)
{
  if(first!=NULL)
  {
    Node* a;
    a=(Node*)malloc(sizeof(Node));
    a->data=value;
    last->next=a;
    a->next=NULL;
    last=a;
  }
  else
  {
    Node* a;
    a=(Node*)malloc(sizeof(Node));
    a->data=value;
    first=a;
    last=a;
    a->next=NULL;
  }
}

void Chain::addChain(Chain& a)
{
  if(first!=NULL)
  {
    if(a.first!=NULL)
    {
      last->next=a.first;
      last=a.last;
    }
  }
  else
  {
    first=a.first;
    last=a.last;
  }
}

void Chain::Display()
{
  Node* a;
  cout<<"Sorted numbers : ";
  for(a=first;a!=NULL;a=a->next)
  {
    cout<<a->data<<" ";
  }
  cout<<"\n";
}

void sort::BucketSort(int k, int n)
{
  int i=0;
  Chain b[k+1];
  for(i=0;i<n;i++)
  {
    b[arr[i]].addNode(arr[i]);
  }
  for(i=1;i<=k;i++)
  {
    b[0].addChain(b[i]);
  }
  b[0].Display();
}

void sort::RadixSort(int k,int n)
{
  int i;
  int* b = (int*)malloc(n*sizeof(int));
  for(i=1;i<=k;i*=10)
  {
    b=CountSort2(b,i,n);
  }

}

int* sort::CountSort2(int* b,int index,int n)
{
  int i;
  int* temp;
  int* c = new int[10];
  for(i=0;i<10;i++)
  {
    c[i]=0;
  }
  for(i=0;i<n;i++)
    c[(arr[i]/index)%10]++;
  for(i=1;i<10;i++)
    c[i]=c[i]+c[i-1];
  for(i=n-1;i>=0;i--)
  {
    b[c[(arr[i]/index)%10]-1]=arr[i];
    c[(arr[i]/index)%10]--;
  }
  temp=arr;
  arr=b;
  b=temp;
  return b;
}

void sort::CountSort(int k, int n)
{
  int i;
  int* c = new int[k+1];
  int* b = new int[n];
  for(i=0;i<=k;i++)
  {
    c[i]=0;
  }
  for(i=0;i<n;i++)
    c[arr[i]]++;
  for(i=1;i<=k;i++)
    c[i]=c[i]+c[i-1];
  for(i=n-1;i>=0;i--)
  {
    b[c[arr[i]]-1]=arr[i];
    c[arr[i]]--;
  }
  arr=b;
  for(i=0;i<=k;i++)
    cout << c[i] << " ";
    cout << "\n";
}

void sort::Display(int n)
{
  int i;
  cout<<"Sorted numbers : ";
  for(i=0;i<n;i++)
    cout << arr[i] << " ";
  cout << "\n";
}

int main()
{
  int i,k=1000,n;
  char c;
  cout << "Enter the number of elements\n";
  cin >> n;
  cout << "Enter the max element\n";
  cin >> k;
  cout<<"Enter which sort\n";
  cout<<"c for count sort, b for bucket sort, r for radix sort\n";
  cin >> c;
  cout<<"Sorting for "<<n<<" numbers\n";
  sort a;
  a.storeElements(k,n);
  //a.Display(n);
  struct timeval tvalBefore, tvalAfter;
  switch(c)
  {
  case 'c':
    gettimeofday(&tvalBefore, NULL);
    a.CountSort(k,n);
    gettimeofday(&tvalAfter, NULL);
    cout<<"Time in microseconds: " << ((tvalAfter.tv_sec - tvalBefore.tv_sec)*(1000000L)+(tvalAfter.tv_usec - tvalBefore.tv_usec)) << "\n";
    a.Display(n);
    break;
  case 'b':
    gettimeofday(&tvalBefore, NULL);
    a.BucketSort(k,n);
    gettimeofday(&tvalAfter, NULL);
    cout<<"Time in microseconds: " << ((tvalAfter.tv_sec - tvalBefore.tv_sec)*(1000000L)+(tvalAfter.tv_usec - tvalBefore.tv_usec)) << "\n";
    break;
  case 'r':
    gettimeofday(&tvalBefore, NULL);
    a.RadixSort(k,n);
    gettimeofday(&tvalAfter, NULL);
    cout<<"Time in microseconds: " << ((tvalAfter.tv_sec - tvalBefore.tv_sec)*(1000000L)+(tvalAfter.tv_usec - tvalBefore.tv_usec)) << "\n";
    a.Display(n);
    break;
  default:
    cout<<"No sort selected\n";
  }
  return 0;
}
